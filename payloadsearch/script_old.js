  			/* Test function to set span text */console.log("script.js loaded")/* Functions for copying output */			function copy_span(idname) {  	var copyText = document.getElementById(idname);	var textArea = document.createElement("textarea");	textArea.value = copyText.textContent + "\n"; // Adds an extra newline	document.body.appendChild(textArea);	textArea.select();	document.execCommand("Copy");	textArea.remove();				}	function copy_string(input_string) {	var textArea = document.createElement("textarea");	textArea.value = input_string;	document.body.appendChild(textArea);	textArea.select();	document.execCommand("Copy");	textArea.remove();				}				function copy_fullslot() {  	var copyTextPref = document.getElementById(slotprefix);  	var copyTextVerb = document.getElementById(slotverb);			var copyText = copyTextPref.textContent.concat(" ", copyTextVerb.textContent);					var textArea = document.createElement("textarea");	textArea.value = copyText;	document.body.appendChild(textArea);	textArea.select();	document.execCommand("Copy");	textArea.remove();}	/* Functions for copying output */			function update_phrase() {				}function set_text(getname, setname){    var copyText = document.getElementById(getname);	var copyTextContent = copyText.value;					eel.testfunc(copyTextContent)(call_Back);	function call_Back(eeldata){       	document.getElementById(setname).innerHTML = eeldata; 	}   }// ADD VERB NAMES TO DROPDOWN (Automatically executed on start)		async function add_verbnames(){    verbnames = await eel.return_verbnames()();    for (const element of verbnames) {        var verbname = element[0];        var verbsupport = element[1];             var option = document.createElement('option');            option.text = verbname + verbsupport;            option.value = verbname;            document.getElementById("verbselect").options.add(option); 	}}// UPDATE SAMPLESasync function update_samples(prefix_id, main_id, suffix_id, prefix_check, main_check, suffix_check, infix_check){    var prefix = document.getElementById(prefix_id);    var prefix_content = prefix.value;    var main = document.getElementById(main_id);    var main_content = main.value;    var suffix = document.getElementById(suffix_id);    var suffix_content = suffix.value;        samples = await eel.return_samples(prefix_content, main_content, suffix_content, prefix_check, main_check, suffix_check)();            /// Set prefix, main, suffix based on whether checked or not                /// Empty list            /// Generate samples and just set immediately instead of doing the list stuff        SAMPLE_stem_full = String.raw`${prefix_content} <b>bewaar</b> ${main_content} ${suffix_content}`    document.getElementById("sample_stem_full").innerHTML = SAMPLE_stem_full;    SAMPLE_stem_split = String.raw`${prefix_content} <b>sla</b> ${main_content} <b>op</b> ${suffix_content}`    document.getElementById("sample_stem_split").innerHTML = SAMPLE_stem_split;        SAMPLE_inf = String.raw`${prefix_content} <b>kun je</b> ${main_content} <b>bewaren</b> ${suffix_content}`        document.getElementById("sample_inf").innerHTML = SAMPLE_inf;        SAMPLE_kunnen_full = String.raw`${prefix_content} <b>zou je</b> ${main_content} <b>kunnen bewaren</b> ${suffix_content}`    document.getElementById("sample_kunnen_full").innerHTML = SAMPLE_kunnen_full;        SAMPLE_kunnen_split = String.raw`${prefix_content} <b>zou je</b> ${main_content} <b>op kunnen slaan</b> ${suffix_content}`        document.getElementById("sample_kunnen_split").innerHTML = SAMPLE_kunnen_split;            SAMPLE_stem_t = String.raw`${prefix_content} <b>ik wil dat je</b> ${main_content} <b>bewaart</b> ${suffix_content}`    document.getElementById("sample_stem_t").innerHTML = SAMPLE_stem_t;            // The idea here is that the optional samples are always generated, visitiblity    // depends on whether the box is checked (which is already taken care of)    document.getElementById("sample_stem_split_infix").innerHTML = samples[6];    document.getElementById("sample_inf_infix").innerHTML = samples[7];    document.getElementById("sample_kunnen_full_infix").innerHTML = samples[8];    document.getElementById("sample_kunnen_split_infix").innerHTML = samples[9];    document.getElementById("sample_stem_t_infix").innerHTML = samples[10];}// UPDATE UTTERANCESasync function update_utterances(prefix_id, main_id, suffix_id, prefix_check, main_check, suffix_check, infix_check){    // Get selected verb name    var verbslot = document.getElementById("verbselect");    var verbname = verbslot.value;    var prefix = document.getElementById(prefix_id);    var prefix_content = prefix.value;    var main = document.getElementById(main_id);    var main_content = main.value;    var suffix = document.getElementById(suffix_id);    var suffix_content = suffix.value;        utterances = await eel.return_utterances(prefix_content, main_content, suffix_content, prefix_check, main_check, suffix_check, verbname, infix_check)();    //console.log(utterances)            utterance_values = utterances[0];    document.getElementById("utterances").innerHTML = utterances[1];}// UPDATE VERB SLOTSasync function update_verbslots(verbslot_id){    var verbslot = document.getElementById(verbslot_id);    var verbname = verbslot.value;            slot_inf = String.raw`  $${verbname}_inf: !include opt/payload/nl_NL/verbs/${verbname}/infinitive.yaml`    slot_stem = String.raw`  $${verbname}_stem: !include opt/payload/nl_NL/verbs/${verbname}/stem.yaml`    slot_stem_t = String.raw`  $${verbname}_stem_t: !include opt/payload/nl_NL/verbs/${verbname}/stem_t.yaml`        slot_value = [slot_inf, slot_stem, slot_stem_t].join("\n")    slot_text = [slot_inf, slot_stem, slot_stem_t].join(String.raw`<br/>`)            // INBOUWEN: Distinctie tussen tekst in span en wat je krijgt als je copy doet!        verbslot_values = slot_value;    document.getElementById("slotverb").innerHTML = slot_text;}// GET VALUE (and not text) FOR PREFIX SLOTSasync function get_prefixslots(prefixslot_id){    slot_inf = String.raw`  $inf_prefix: !include opt/payload/nl_NL/verbs/inf_prefix.yaml`    slot_stem_t = String.raw`  $stem_t_prefix: !include opt/payload/nl_NL/verbs/stem_t_prefix.yaml`    prefixslots_values = [slot_inf, slot_stem_t].join("\n")}// FUNCTION THAT UPDATES STYLE BASED ON Checkboxfunction apply_checkbox(checkbox_id, span_id) {    // get checkbox based on id    var checked_status = document.getElementById(checkbox_id).checked;    //console.log(checkbox_id)    //console.log(span_id)    //console.log(checked_status)        if (checked_status == false) {        document.getElementById(span_id).style.textDecoration = "line-through";        document.getElementById(span_id).style.color = "dimgray";    } else {        document.getElementById(span_id).style.textDecoration = "none";        document.getElementById(span_id).style.color = "black";    }        return checked_status;}function apply_option_checkbox(checkbox_id, span_class){    var checked_status = document.getElementById(checkbox_id).checked;        if (checked_status == false) {        for (const element of document.querySelectorAll(".optionalsample")) {            element.style.display = "none";        }                    } else {        for (const element of document.querySelectorAll(".optionalsample")) {            element.style.display = "list-item";        }    }        return checked_status;    }// ALL FUNCTIONS THAT NEED TO BE EXECUTED WHEN CHANGING INPUT async function update_everything(){    // Checkbox stuff    prefix_check_status = apply_checkbox("prefixcheck", "prefixlabel");    phrase_check_status = apply_checkbox("phrasecheck", "phraselabel");    suffix_check_status = apply_checkbox("suffixcheck", "suffixlabel");    infix_check_status = apply_option_checkbox("addinfixcheck", "optionalsample");    // Get samples and output    update_verbslots("verbselect");    update_samples("prefix", "phrase", "suffix", prefix_check_status, phrase_check_status, suffix_check_status, infix_check_status);    update_utterances("prefix", "phrase", "suffix", prefix_check_status, phrase_check_status, suffix_check_status, infix_check_status);    get_prefixslots("slotprefix");} 			/* Calling functions on run */ 			 							 add_verbnames();window.onload = function() {  update_everything();};